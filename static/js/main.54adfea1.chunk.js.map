{"version":3,"sources":["Components/Tooth.js","Components/Teeth.js","Components/Odontogram.js","serviceWorker.js","index.js"],"names":["Tooth","number","positionX","positionY","onChange","initialState","Cavities","center","top","bottom","left","right","Extract","Crown","Filter","Fracture","crown","val","type","value","extract","carie","z","zone","useReducer","toothState","action","setCavities","Error","dispatch","useContextMenu","submenuSymbol","contextMenu","useCM","firstUpdate","useRef","useEffect","current","doneSubMenu","place","todoSubMenu","menuConfig","getClassNamesByZone","translate","className","transform","points","onContextMenu","otherFigures","stroke","x1","y1","x2","y2","strokeWidth","cx","cy","r","fill","drawToothActions","x","y","prevState","Teeth","start","end","handleChange","tooths","list","i","push","getInverseArray","getArray","id","map","key","Math","abs","Odontogram","odontogramState","handleToothUpdate","version","height","width","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.54adfea1.chunk.js","sourcesContent":["import React, { useEffect, useReducer, useRef } from 'react';\nimport useContextMenu from 'contextmenu';\nimport 'contextmenu/ContextMenu.css';\nimport './Tooth.css';\n\nfunction Tooth({ number, positionX, positionY, onChange }) {\n    const initialState = {\n        Cavities: {\n            center: 0,\n            top: 0,\n            bottom: 0,\n            left: 0,\n            right: 0\n        },\n        Extract: 0,\n        Crown: 0,\n        Filter: 0,\n        Fracture: 0\n    };\n\n    function reducer(toothState, action) {\n        switch (action.type) {\n            case 'crown':\n                return { ...toothState, Crown: action.value };\n            case 'extract':\n                return { ...toothState, Extract: action.value };\n            case 'filter':\n                return { ...toothState, Filter: action.value };\n            case 'fracture':\n                return { ...toothState, Fracture: action.value };\n            case 'carie':\n                return { ...toothState, Cavities: setCavities(toothState, action.zone, action.value) };\n            case 'clear':\n                return initialState;\n            default:\n                throw new Error();\n        }\n    }\n\n    const crown = (val) => ({ type: \"crown\", value: val });\n    const extract = (val) => ({ type: \"extract\", value: val });\n    const filter = (val) => ({ type: \"filter\", value: val });\n    const fracture = (val) => ({ type: \"fracture\", value: val });\n    const carie = (z, val) => ({ type: \"carie\", value: val, zone: z });\n    const clear = () => ({ type: \"clear\" });\n\n    const [toothState, dispatch] = useReducer(reducer, initialState);\n    const [contextMenu, useCM] = useContextMenu({ submenuSymbol: '>' });\n\n    const firstUpdate = useRef(true);\n    useEffect(() => {\n        if (firstUpdate.current) {\n            firstUpdate.current = false;\n            return;\n        }\n        onChange(number, toothState);\n    }, [toothState, onChange, number]);\n\n    // Done SubMenu\n    const doneSubMenu = (place, value) => {\n        return {\n            'Cavity': () => {\n                dispatch(carie(place, value));\n            },\n            'Cavities All': () => dispatch(carie('all', value)),\n            'Absent': () => dispatch(extract(value)),\n            'Crown': () => dispatch(crown(value)),\n        }\n    }\n\n    // Todo SubMenu\n    const todoSubMenu = (place, value) => {\n        return {\n            'Cavity': () => dispatch(carie(place, value)),\n            'Cavities All': () => dispatch(carie('all', value)),\n            'Absent': () => dispatch(extract(value)),\n            'Crown': () => dispatch(crown(value)),\n            'Filtered Out': () => dispatch(filter(value)),\n            'Fractured': () => dispatch(fracture(value)),\n        }\n    }\n\n    // Main ContextMenu\n    const menuConfig = (place) => {\n        return {\n            'Done': doneSubMenu(place, 1),\n            'To Do': todoSubMenu(place, 2),\n            'JSX line': <hr></hr>,\n            'Clear All': () => dispatch(clear()),\n        }\n    };\n\n    let getClassNamesByZone = (zone) => {\n        if (toothState.Cavities) {\n            if (toothState.Cavities[zone] === 1) {\n                return 'to-do';\n            } else if (toothState.Cavities[zone] === 2) {\n                return 'done';\n            }\n        }\n\n        return '';\n    }\n\n    // Tooth position\n    const translate = `translate(${positionX},${positionY})`;\n\n    return (\n        <svg className=\"tooth\">\n            <g transform={translate}>\n                <polygon\n                    points=\"0,0 20,0 15,5 5,5\"\n                    onContextMenu={useCM(menuConfig('top'))}\n                    className={getClassNamesByZone('top')}\n                />\n                <polygon\n                    points=\"5,15 15,15 20,20 0,20\"\n                    onContextMenu={useCM(menuConfig('bottom'))}\n                    className={getClassNamesByZone('bottom')}\n                />\n                <polygon\n                    points=\"15,5 20,0 20,20 15,15\"\n                    onContextMenu={useCM(menuConfig('left'))}\n                    className={getClassNamesByZone('left')}\n                />\n                <polygon\n                    points=\"0,0 5,5 5,15 0,20\"\n                    onContextMenu={useCM(menuConfig('right'))}\n                    className={getClassNamesByZone('right')}\n                />\n                <polygon\n                    points=\"5,5 15,5 15,15 5,15\"\n                    onContextMenu={useCM(menuConfig('center'))}\n                    className={getClassNamesByZone('center')}\n                />\n                {drawToothActions()}\n                <text\n                    x=\"6\"\n                    y=\"30\"\n                    stroke=\"navy\"\n                    fill=\"navy\"\n                    strokeWidth=\"0.1\"\n                    className=\"tooth\">\n                    {number}\n                </text>\n            </g>\n            {contextMenu}\n        </svg>\n    )\n\n    function setCavities(prevState, zone, value) {\n        if (prevState && prevState.Cavities) {\n            if (zone === \"all\") {\n                prevState.Cavities =\n                {\n                    center: value,\n                    top: value,\n                    bottom: value,\n                    left: value,\n                    right: value\n                }\n            } else {\n                prevState.Cavities[zone] = value;\n            }\n\n            return prevState.Cavities;\n        }\n    }\n\n    function drawToothActions() {\n        let otherFigures = null;\n        if (toothState.Extract > 0) {\n            otherFigures = <g stroke={toothState.Extract === 1 ? \"red\" : \"blue\"}>\n                <line x1=\"0\" y1=\"0\" x2=\"20\" y2=\"20\" strokeWidth=\"2\" />\n                <line x1=\"0\" y1=\"20\" x2=\"20\" y2=\"0\" strokeWidth=\"2\" />\n            </g>\n        }\n\n        if (toothState.Fracture > 0) {\n            otherFigures = <g stroke={toothState.Fracture === 1 ? \"red\" : \"blue\"}>\n                <line x1=\"0\" y1=\"10\" x2=\"20\" y2=\"10\" strokeWidth=\"2\"></line>\n            </g>\n        }\n\n        if (toothState.Filter > 0) {\n            otherFigures = <g stroke={toothState.Fracture === 1 ? \"red\" : \"blue\"}>\n                <line x1=\"0\" y1=\"20\" x2=\"20\" y2=\"0\" strokeWidth=\"2\" />\n            </g>\n        }\n\n        if (toothState.Crown > 0) {\n            otherFigures = <circle\n                cx=\"10\"\n                cy=\"10\"\n                r=\"10\"\n                fill=\"none\"\n                stroke={toothState.Crown === 1 ? \"red\" : \"blue\"}\n                strokeWidth=\"2\"\n            />;\n        }\n\n        return otherFigures;\n    }\n}\n\nexport default Tooth;","import React from 'react';\nimport Tooth from './Tooth';\n\nfunction Teeth({ start, end, x, y, handleChange }) {\n    let tooths = getArray(start, end);\n\n    return (\n        <g transform=\"scale(1.4)\" id=\"gmain\">\n            {\n                tooths.map((i) =>\n                    <Tooth onChange={handleChange}\n                        key={i}\n                        number={i}\n                        positionY={y}\n                        positionX={Math.abs((i - start) * 25) + x}\n                    />\n                )\n            }\n        </g>\n    )\n}\n\nfunction getArray(start, end) {\n    if (start > end) return getInverseArray(start, end);\n\n    let list = [];\n    for (var i = start; i <= end; i++) {\n        list.push(i);\n    }\n\n    return list;\n}\n\nfunction getInverseArray(start, end) {\n    let list = [];\n\n    for (var i = start; i >= end; i--) {\n        list.push(i);\n    }\n\n    return list;\n}\n\nexport default Teeth;","import React from 'react';\nimport './Odontogram.css';\nimport Teeth from './Teeth';\n\nfunction Odontogram() {\n\n  let odontogramState = {};\n\n  const handleToothUpdate = (id, toothState) => {\n    odontogramState[id] = toothState;\n  };\n\n  return (\n    <div className=\"Odontogram\">\n      <svg version=\"1.1\" height=\"100%\" width=\"100%\" >\n        <Teeth start={18} end={11} x={0} y={0} handleChange={handleToothUpdate} />\n        <Teeth start={21} end={28} x={210} y={0} handleChange={handleToothUpdate} />\n\n        <Teeth start={55} end={51} x={75} y={40} handleChange={handleToothUpdate} />\n        <Teeth start={61} end={65} x={210} y={40} handleChange={handleToothUpdate} />\n\n        <Teeth start={85} end={81} x={75} y={80} handleChange={handleToothUpdate} />\n        <Teeth start={71} end={75} x={210} y={80} handleChange={handleToothUpdate} />\n\n        <Teeth start={48} end={41} x={0} y={120} handleChange={handleToothUpdate} />\n        <Teeth start={31} end={38} x={210} y={120} handleChange={handleToothUpdate} />\n      </svg>\n    </div>\n  );\n}\n\nexport default Odontogram;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Odontogram from './Components/Odontogram';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Odontogram />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}